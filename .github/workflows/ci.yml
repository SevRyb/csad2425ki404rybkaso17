name: CI Qt CMake (Windows) and PlatformIO

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  # Job for building the C++ Qt 5 client project on Windows
  client-build-windows:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install CMake
      - name: Install CMake
        uses: lukka/get-cmake@v3.21.2

      # Step 3: Install Qt 5 on Windows using MSVC
      - name: Install Qt 5
        run: |
          choco install qt5-msvc2019 --confirm
          echo "Qt 5 with MSVC installed"

      # Step 4: Install Visual Studio Build Tools
      - name: Install Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v1

      # Step 5: Create build directory
      - name: Create build directory
        run: mkdir build
        working-directory: sw-client

      # Step 6: Configure project using CMake with MSVC
      - name: Configure with CMake
        run: cmake -G "Visual Studio 16 2019" -A x64 ..
        working-directory: sw-client/build

      # Step 7: Build the project
      - name: Build client app
        run: cmake --build . --config Release
        working-directory: sw-client/build

      # Step 8: Bundle necessary Qt DLLs with windeployqt
      - name: Deploy Qt DLLs
        run: |
          $qtPath = 'C:\Qt\5.15.2\msvc2019_64\bin'
          $appPath = 'sw-client\build\Release'
          &$qtPath\windeployqt.exe $appPath\sw-client.exe
        shell: powershell

      # Step 9: Upload client build artifacts
      - name: Upload Client build artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: client-build-windows
          path: sw-client/build/Release/sw-client.exe


  # Job for building the PlatformIO server project
  # server-build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Checkout the repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     # Step 2: Install PlatformIO
  #     - name: Install PlatformIO
  #       run: |
  #         python3 -m pip install -U platformio

  #     # Step 3: Build PlatformIO project
  #     - name: Build PlatformIO project
  #       run: pio run
  #       working-directory: server

  #     # Step 4: Upload PlatformIO build artifacts
  #     - name: Upload Server build artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: server-build
  #         path: server/.pio/build/*
